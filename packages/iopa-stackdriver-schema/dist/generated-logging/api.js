"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Stackdriver Logging
 * Writes log entries and manages your Stackdriver Logging configuration. The table entries below are presented in alphabetical order, not in order of common use. For explanations of the concepts found in the table entries, read the Stackdriver Logging documentation.
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const portableFetch = require("portable-fetch");
const BASE_PATH = "https://logging.googleapis.com".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace LabelDescriptor
 */
var LabelDescriptor;
(function (LabelDescriptor) {
    /**
     * @export
     * @enum {string}
     */
    let ValueTypeEnum;
    (function (ValueTypeEnum) {
        ValueTypeEnum[ValueTypeEnum["STRING"] = 'STRING'] = "STRING";
        ValueTypeEnum[ValueTypeEnum["BOOL"] = 'BOOL'] = "BOOL";
        ValueTypeEnum[ValueTypeEnum["INT64"] = 'INT64'] = "INT64";
    })(ValueTypeEnum = LabelDescriptor.ValueTypeEnum || (LabelDescriptor.ValueTypeEnum = {}));
})(LabelDescriptor = exports.LabelDescriptor || (exports.LabelDescriptor = {}));
/**
 * @export
 * @namespace LogEntry
 */
var LogEntry;
(function (LogEntry) {
    /**
     * @export
     * @enum {string}
     */
    let SeverityEnum;
    (function (SeverityEnum) {
        SeverityEnum[SeverityEnum["DEFAULT"] = 'DEFAULT'] = "DEFAULT";
        SeverityEnum[SeverityEnum["DEBUG"] = 'DEBUG'] = "DEBUG";
        SeverityEnum[SeverityEnum["INFO"] = 'INFO'] = "INFO";
        SeverityEnum[SeverityEnum["NOTICE"] = 'NOTICE'] = "NOTICE";
        SeverityEnum[SeverityEnum["WARNING"] = 'WARNING'] = "WARNING";
        SeverityEnum[SeverityEnum["ERROR"] = 'ERROR'] = "ERROR";
        SeverityEnum[SeverityEnum["CRITICAL"] = 'CRITICAL'] = "CRITICAL";
        SeverityEnum[SeverityEnum["ALERT"] = 'ALERT'] = "ALERT";
        SeverityEnum[SeverityEnum["EMERGENCY"] = 'EMERGENCY'] = "EMERGENCY";
    })(SeverityEnum = LogEntry.SeverityEnum || (LogEntry.SeverityEnum = {}));
})(LogEntry = exports.LogEntry || (exports.LogEntry = {}));
/**
 * @export
 * @namespace LogLine
 */
var LogLine;
(function (LogLine) {
    /**
     * @export
     * @enum {string}
     */
    let SeverityEnum;
    (function (SeverityEnum) {
        SeverityEnum[SeverityEnum["DEFAULT"] = 'DEFAULT'] = "DEFAULT";
        SeverityEnum[SeverityEnum["DEBUG"] = 'DEBUG'] = "DEBUG";
        SeverityEnum[SeverityEnum["INFO"] = 'INFO'] = "INFO";
        SeverityEnum[SeverityEnum["NOTICE"] = 'NOTICE'] = "NOTICE";
        SeverityEnum[SeverityEnum["WARNING"] = 'WARNING'] = "WARNING";
        SeverityEnum[SeverityEnum["ERROR"] = 'ERROR'] = "ERROR";
        SeverityEnum[SeverityEnum["CRITICAL"] = 'CRITICAL'] = "CRITICAL";
        SeverityEnum[SeverityEnum["ALERT"] = 'ALERT'] = "ALERT";
        SeverityEnum[SeverityEnum["EMERGENCY"] = 'EMERGENCY'] = "EMERGENCY";
    })(SeverityEnum = LogLine.SeverityEnum || (LogLine.SeverityEnum = {}));
})(LogLine = exports.LogLine || (exports.LogLine = {}));
/**
 * @export
 * @namespace LogMetric
 */
var LogMetric;
(function (LogMetric) {
    /**
     * @export
     * @enum {string}
     */
    let VersionEnum;
    (function (VersionEnum) {
        VersionEnum[VersionEnum["V2"] = 'V2'] = "V2";
        VersionEnum[VersionEnum["V1"] = 'V1'] = "V1";
    })(VersionEnum = LogMetric.VersionEnum || (LogMetric.VersionEnum = {}));
})(LogMetric = exports.LogMetric || (exports.LogMetric = {}));
/**
 * @export
 * @namespace LogSink
 */
var LogSink;
(function (LogSink) {
    /**
     * @export
     * @enum {string}
     */
    let OutputVersionFormatEnum;
    (function (OutputVersionFormatEnum) {
        OutputVersionFormatEnum[OutputVersionFormatEnum["VERSIONFORMATUNSPECIFIED"] = 'VERSION_FORMAT_UNSPECIFIED'] = "VERSIONFORMATUNSPECIFIED";
        OutputVersionFormatEnum[OutputVersionFormatEnum["V2"] = 'V2'] = "V2";
        OutputVersionFormatEnum[OutputVersionFormatEnum["V1"] = 'V1'] = "V1";
    })(OutputVersionFormatEnum = LogSink.OutputVersionFormatEnum || (LogSink.OutputVersionFormatEnum = {}));
})(LogSink = exports.LogSink || (exports.LogSink = {}));
/**
 * @export
 * @namespace MetricDescriptor
 */
var MetricDescriptor;
(function (MetricDescriptor) {
    /**
     * @export
     * @enum {string}
     */
    let LaunchStageEnum;
    (function (LaunchStageEnum) {
        LaunchStageEnum[LaunchStageEnum["LAUNCHSTAGEUNSPECIFIED"] = 'LAUNCH_STAGE_UNSPECIFIED'] = "LAUNCHSTAGEUNSPECIFIED";
        LaunchStageEnum[LaunchStageEnum["EARLYACCESS"] = 'EARLY_ACCESS'] = "EARLYACCESS";
        LaunchStageEnum[LaunchStageEnum["ALPHA"] = 'ALPHA'] = "ALPHA";
        LaunchStageEnum[LaunchStageEnum["BETA"] = 'BETA'] = "BETA";
        LaunchStageEnum[LaunchStageEnum["GA"] = 'GA'] = "GA";
        LaunchStageEnum[LaunchStageEnum["DEPRECATED"] = 'DEPRECATED'] = "DEPRECATED";
    })(LaunchStageEnum = MetricDescriptor.LaunchStageEnum || (MetricDescriptor.LaunchStageEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let MetricKindEnum;
    (function (MetricKindEnum) {
        MetricKindEnum[MetricKindEnum["METRICKINDUNSPECIFIED"] = 'METRIC_KIND_UNSPECIFIED'] = "METRICKINDUNSPECIFIED";
        MetricKindEnum[MetricKindEnum["GAUGE"] = 'GAUGE'] = "GAUGE";
        MetricKindEnum[MetricKindEnum["DELTA"] = 'DELTA'] = "DELTA";
        MetricKindEnum[MetricKindEnum["CUMULATIVE"] = 'CUMULATIVE'] = "CUMULATIVE";
    })(MetricKindEnum = MetricDescriptor.MetricKindEnum || (MetricDescriptor.MetricKindEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let ValueTypeEnum;
    (function (ValueTypeEnum) {
        ValueTypeEnum[ValueTypeEnum["VALUETYPEUNSPECIFIED"] = 'VALUE_TYPE_UNSPECIFIED'] = "VALUETYPEUNSPECIFIED";
        ValueTypeEnum[ValueTypeEnum["BOOL"] = 'BOOL'] = "BOOL";
        ValueTypeEnum[ValueTypeEnum["INT64"] = 'INT64'] = "INT64";
        ValueTypeEnum[ValueTypeEnum["DOUBLE"] = 'DOUBLE'] = "DOUBLE";
        ValueTypeEnum[ValueTypeEnum["STRING"] = 'STRING'] = "STRING";
        ValueTypeEnum[ValueTypeEnum["DISTRIBUTION"] = 'DISTRIBUTION'] = "DISTRIBUTION";
        ValueTypeEnum[ValueTypeEnum["MONEY"] = 'MONEY'] = "MONEY";
    })(ValueTypeEnum = MetricDescriptor.ValueTypeEnum || (MetricDescriptor.ValueTypeEnum = {}));
})(MetricDescriptor = exports.MetricDescriptor || (exports.MetricDescriptor = {}));
/**
 * @export
 * @namespace MetricDescriptorMetadata
 */
var MetricDescriptorMetadata;
(function (MetricDescriptorMetadata) {
    /**
     * @export
     * @enum {string}
     */
    let LaunchStageEnum;
    (function (LaunchStageEnum) {
        LaunchStageEnum[LaunchStageEnum["LAUNCHSTAGEUNSPECIFIED"] = 'LAUNCH_STAGE_UNSPECIFIED'] = "LAUNCHSTAGEUNSPECIFIED";
        LaunchStageEnum[LaunchStageEnum["EARLYACCESS"] = 'EARLY_ACCESS'] = "EARLYACCESS";
        LaunchStageEnum[LaunchStageEnum["ALPHA"] = 'ALPHA'] = "ALPHA";
        LaunchStageEnum[LaunchStageEnum["BETA"] = 'BETA'] = "BETA";
        LaunchStageEnum[LaunchStageEnum["GA"] = 'GA'] = "GA";
        LaunchStageEnum[LaunchStageEnum["DEPRECATED"] = 'DEPRECATED'] = "DEPRECATED";
    })(LaunchStageEnum = MetricDescriptorMetadata.LaunchStageEnum || (MetricDescriptorMetadata.LaunchStageEnum = {}));
})(MetricDescriptorMetadata = exports.MetricDescriptorMetadata || (exports.MetricDescriptorMetadata = {}));
/**
 * @export
 * @namespace MonitoredResourceDescriptor
 */
var MonitoredResourceDescriptor;
(function (MonitoredResourceDescriptor) {
    /**
     * @export
     * @enum {string}
     */
    let LaunchStageEnum;
    (function (LaunchStageEnum) {
        LaunchStageEnum[LaunchStageEnum["LAUNCHSTAGEUNSPECIFIED"] = 'LAUNCH_STAGE_UNSPECIFIED'] = "LAUNCHSTAGEUNSPECIFIED";
        LaunchStageEnum[LaunchStageEnum["EARLYACCESS"] = 'EARLY_ACCESS'] = "EARLYACCESS";
        LaunchStageEnum[LaunchStageEnum["ALPHA"] = 'ALPHA'] = "ALPHA";
        LaunchStageEnum[LaunchStageEnum["BETA"] = 'BETA'] = "BETA";
        LaunchStageEnum[LaunchStageEnum["GA"] = 'GA'] = "GA";
        LaunchStageEnum[LaunchStageEnum["DEPRECATED"] = 'DEPRECATED'] = "DEPRECATED";
    })(LaunchStageEnum = MonitoredResourceDescriptor.LaunchStageEnum || (MonitoredResourceDescriptor.LaunchStageEnum = {}));
})(MonitoredResourceDescriptor = exports.MonitoredResourceDescriptor || (exports.MonitoredResourceDescriptor = {}));
/**
 * EntriesApi - fetch parameter creator
 * @export
 */
exports.EntriesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ListLogEntriesRequest} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options = {}) {
            const localVarPath = `/v2/entries:list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ListLogEntriesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {WriteLogEntriesRequest} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options = {}) {
            const localVarPath = `/v2/entries:write`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("WriteLogEntriesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * EntriesApi - functional programming interface
 * @export
 */
exports.EntriesApiFp = function (configuration) {
    return {
        /**
         * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ListLogEntriesRequest} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            const localVarFetchArgs = exports.EntriesApiFetchParamCreator(configuration).loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {WriteLogEntriesRequest} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            const localVarFetchArgs = exports.EntriesApiFetchParamCreator(configuration).loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * EntriesApi - factory interface
 * @export
 */
exports.EntriesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ListLogEntriesRequest} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            return exports.EntriesApiFp(configuration).loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
        /**
         * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {WriteLogEntriesRequest} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            return exports.EntriesApiFp(configuration).loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
    };
};
/**
 * EntriesApi - object-oriented interface
 * @export
 * @class EntriesApi
 * @extends {BaseAPI}
 */
class EntriesApi extends BaseAPI {
    /**
     * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {ListLogEntriesRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
        return exports.EntriesApiFp(this.configuration).loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }
    /**
     * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {WriteLogEntriesRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
        return exports.EntriesApiFp(this.configuration).loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }
}
exports.EntriesApi = EntriesApi;
/**
 * MonitoredResourceDescriptorsApi - fetch parameter creator
 * @export
 */
exports.MonitoredResourceDescriptorsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Lists the descriptors for monitored resource types used by Logging.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options = {}) {
            const localVarPath = `/v2/monitoredResourceDescriptors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MonitoredResourceDescriptorsApi - functional programming interface
 * @export
 */
exports.MonitoredResourceDescriptorsApiFp = function (configuration) {
    return {
        /**
         * Lists the descriptors for monitored resource types used by Logging.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            const localVarFetchArgs = exports.MonitoredResourceDescriptorsApiFetchParamCreator(configuration).loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MonitoredResourceDescriptorsApi - factory interface
 * @export
 */
exports.MonitoredResourceDescriptorsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Lists the descriptors for monitored resource types used by Logging.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            return exports.MonitoredResourceDescriptorsApiFp(configuration).loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
    };
};
/**
 * MonitoredResourceDescriptorsApi - object-oriented interface
 * @export
 * @class MonitoredResourceDescriptorsApi
 * @extends {BaseAPI}
 */
class MonitoredResourceDescriptorsApi extends BaseAPI {
    /**
     * Lists the descriptors for monitored resource types used by Logging.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoredResourceDescriptorsApi
     */
    loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
        return exports.MonitoredResourceDescriptorsApiFp(this.configuration).loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }
}
exports.MonitoredResourceDescriptorsApi = MonitoredResourceDescriptorsApi;
/**
 * OrganizationsApi - fetch parameter creator
 * @export
 */
exports.OrganizationsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
         * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options = {}) {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent', 'Required parameter parent was null or undefined when calling loggingOrganizationsExclusionsCreate.');
            }
            const localVarPath = `/v2/{parent}/exclusions`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogExclusion" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options = {}) {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling loggingOrganizationsExclusionsDelete.');
            }
            const localVarPath = `/v2/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the description of an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options = {}) {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling loggingOrganizationsExclusionsGet.');
            }
            const localVarPath = `/v2/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the exclusions in a parent resource.
         * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options = {}) {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent', 'Required parameter parent was null or undefined when calling loggingOrganizationsExclusionsList.');
            }
            const localVarPath = `/v2/{parent}/exclusions`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes one or more properties of an existing exclusion.
         * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body]
         * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options = {}) {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling loggingOrganizationsExclusionsPatch.');
            }
            const localVarPath = `/v2/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (updateMask !== undefined) {
                localVarQueryParameter['updateMask'] = updateMask;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogExclusion" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
         * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options = {}) {
            // verify required parameter 'logName' is not null or undefined
            if (logName === null || logName === undefined) {
                throw new RequiredError('logName', 'Required parameter logName was null or undefined when calling loggingOrganizationsLogsDelete.');
            }
            const localVarPath = `/v2/{logName}`
                .replace(`{${"logName"}}`, encodeURIComponent(String(logName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
         * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options = {}) {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent', 'Required parameter parent was null or undefined when calling loggingOrganizationsLogsList.');
            }
            const localVarPath = `/v2/{parent}/logs`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
         * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options = {}) {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent', 'Required parameter parent was null or undefined when calling loggingOrganizationsSinksCreate.');
            }
            const localVarPath = `/v2/{parent}/sinks`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (uniqueWriterIdentity !== undefined) {
                localVarQueryParameter['uniqueWriterIdentity'] = uniqueWriterIdentity;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogSink" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
         * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options = {}) {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName', 'Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksDelete.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a sink.
         * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options = {}) {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName', 'Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksGet.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists sinks.
         * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options = {}) {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent', 'Required parameter parent was null or undefined when calling loggingOrganizationsSinksList.');
            }
            const localVarPath = `/v2/{parent}/sinks`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options = {}) {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName', 'Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksPatch.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (uniqueWriterIdentity !== undefined) {
                localVarQueryParameter['uniqueWriterIdentity'] = uniqueWriterIdentity;
            }
            if (updateMask !== undefined) {
                localVarQueryParameter['updateMask'] = updateMask;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogSink" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options = {}) {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName', 'Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksUpdate.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (uniqueWriterIdentity !== undefined) {
                localVarQueryParameter['uniqueWriterIdentity'] = uniqueWriterIdentity;
            }
            if (updateMask !== undefined) {
                localVarQueryParameter['updateMask'] = updateMask;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogSink" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
exports.OrganizationsApiFp = function (configuration) {
    return {
        /**
         * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
         * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets the description of an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists all the exclusions in a parent resource.
         * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Changes one or more properties of an existing exclusion.
         * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body]
         * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
         * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
         * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
         * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
         * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets a sink.
         * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists sinks.
         * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options) {
            const localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
exports.OrganizationsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
         * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
        /**
         * Deletes an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Gets the description of an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists all the exclusions in a parent resource.
         * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Changes one or more properties of an existing exclusion.
         * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body]
         * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options)(fetch, basePath);
        },
        /**
         * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
         * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
         * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
         * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options)(fetch, basePath);
        },
        /**
         * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
         * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Gets a sink.
         * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists sinks.
         * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(fetch, basePath);
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body]
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options) {
            return exports.OrganizationsApiFp(configuration).loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(fetch, basePath);
        },
    };
};
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
class OrganizationsApi extends BaseAPI {
    /**
     * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
     * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogExclusion} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes an exclusion.
     * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }
    /**
     * Gets the description of an exclusion.
     * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }
    /**
     * Lists all the exclusions in a parent resource.
     * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }
    /**
     * Changes one or more properties of an existing exclusion.
     * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogExclusion} [body]
     * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
     * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }
    /**
     * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
     * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }
    /**
     * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
     * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body]
     * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
     * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }
    /**
     * Gets a sink.
     * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }
    /**
     * Lists sinks.
     * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot;
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }
    /**
     * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
     * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body]
     * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
     * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(this.fetch, this.basePath);
    }
    /**
     * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
     * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body]
     * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
     * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options) {
        return exports.OrganizationsApiFp(this.configuration).loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(this.fetch, this.basePath);
    }
}
exports.OrganizationsApi = OrganizationsApi;
/**
 * ProjectsApi - fetch parameter creator
 * @export
 */
exports.ProjectsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates a logs-based metric.
         * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options = {}) {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent', 'Required parameter parent was null or undefined when calling loggingProjectsMetricsCreate.');
            }
            const localVarPath = `/v2/{parent}/metrics`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogMetric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a logs-based metric.
         * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options = {}) {
            // verify required parameter 'metricName' is not null or undefined
            if (metricName === null || metricName === undefined) {
                throw new RequiredError('metricName', 'Required parameter metricName was null or undefined when calling loggingProjectsMetricsDelete.');
            }
            const localVarPath = `/v2/{metricName}`
                .replace(`{${"metricName"}}`, encodeURIComponent(String(metricName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a logs-based metric.
         * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options = {}) {
            // verify required parameter 'metricName' is not null or undefined
            if (metricName === null || metricName === undefined) {
                throw new RequiredError('metricName', 'Required parameter metricName was null or undefined when calling loggingProjectsMetricsGet.');
            }
            const localVarPath = `/v2/{metricName}`
                .replace(`{${"metricName"}}`, encodeURIComponent(String(metricName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists logs-based metrics.
         * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options = {}) {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent', 'Required parameter parent was null or undefined when calling loggingProjectsMetricsList.');
            }
            const localVarPath = `/v2/{parent}/metrics`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or updates a logs-based metric.
         * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options = {}) {
            // verify required parameter 'metricName' is not null or undefined
            if (metricName === null || metricName === undefined) {
                throw new RequiredError('metricName', 'Required parameter metricName was null or undefined when calling loggingProjectsMetricsUpdate.');
            }
            const localVarPath = `/v2/{metricName}`
                .replace(`{${"metricName"}}`, encodeURIComponent(String(metricName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }
            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }
            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }
            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }
            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }
            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }
            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }
            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogMetric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
exports.ProjectsApiFp = function (configuration) {
    return {
        /**
         * Creates a logs-based metric.
         * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            const localVarFetchArgs = exports.ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a logs-based metric.
         * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            const localVarFetchArgs = exports.ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets a logs-based metric.
         * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            const localVarFetchArgs = exports.ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists logs-based metrics.
         * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            const localVarFetchArgs = exports.ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates or updates a logs-based metric.
         * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            const localVarFetchArgs = exports.ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProjectsApi - factory interface
 * @export
 */
exports.ProjectsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates a logs-based metric.
         * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            return exports.ProjectsApiFp(configuration).loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
        /**
         * Deletes a logs-based metric.
         * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            return exports.ProjectsApiFp(configuration).loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Gets a logs-based metric.
         * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
            return exports.ProjectsApiFp(configuration).loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists logs-based metrics.
         * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot;
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
            return exports.ProjectsApiFp(configuration).loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Creates or updates a logs-based metric.
         * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
            return exports.ProjectsApiFp(configuration).loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
    };
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
class ProjectsApi extends BaseAPI {
    /**
     * Creates a logs-based metric.
     * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogMetric} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
        return exports.ProjectsApiFp(this.configuration).loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a logs-based metric.
     * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
        return exports.ProjectsApiFp(this.configuration).loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }
    /**
     * Gets a logs-based metric.
     * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot;
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options) {
        return exports.ProjectsApiFp(this.configuration).loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }
    /**
     * Lists logs-based metrics.
     * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot;
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options) {
        return exports.ProjectsApiFp(this.configuration).loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }
    /**
     * Creates or updates a logs-based metric.
     * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogMetric} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options) {
        return exports.ProjectsApiFp(this.configuration).loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }
}
exports.ProjectsApi = ProjectsApi;
//# sourceMappingURL=api.js.map