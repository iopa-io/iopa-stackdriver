/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Stackdriver Logging
 * Writes log entries and manages your Stackdriver Logging configuration. The table entries below are presented in alphabetical order, not in order of common use. For explanations of the concepts found in the table entries, read the Stackdriver Logging documentation.
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://logging.googleapis.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Options that change functionality of a sink exporting data to BigQuery.
 * @export
 * @interface BigQueryOptions
 */
export interface BigQueryOptions {
    /**
     * Optional. Whether to use BigQuery's partition tables. By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax has to be used instead. In both cases, tables are sharded based on UTC timezone.
     * @type {boolean}
     * @memberof BigQueryOptions
     */
    usePartitionedTables?: boolean;
}

/**
 * BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
 * @export
 * @interface BucketOptions
 */
export interface BucketOptions {
    /**
     * The explicit buckets.
     * @type {Explicit}
     * @memberof BucketOptions
     */
    explicitBuckets?: Explicit;
    /**
     * The exponential buckets.
     * @type {Exponential}
     * @memberof BucketOptions
     */
    exponentialBuckets?: Exponential;
    /**
     * The linear bucket.
     * @type {Linear}
     * @memberof BucketOptions
     */
    linearBuckets?: Linear;
}

/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo {   rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for Empty is empty JSON object {}.
 * @export
 * @interface Empty
 */
export interface Empty {
}

/**
 * Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): boundsi  Lower bound (1 <= i < N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
 * @export
 * @interface Explicit
 */
export interface Explicit {
    /**
     * The values must be monotonically increasing.
     * @type {Array<number>}
     * @memberof Explicit
     */
    bounds?: Array<number>;
}

/**
 * Specifies an exponential sequence of buckets that have a width that is proportional to the value of the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): scale * (growth_factor ^ i).  Lower bound (1 <= i < N): scale * (growth_factor ^ (i - 1)).
 * @export
 * @interface Exponential
 */
export interface Exponential {
    /**
     * Must be greater than 1.
     * @type {number}
     * @memberof Exponential
     */
    growthFactor?: number;
    /**
     * Must be greater than 0.
     * @type {number}
     * @memberof Exponential
     */
    numFiniteBuckets?: number;
    /**
     * Must be greater than 0.
     * @type {number}
     * @memberof Exponential
     */
    scale?: number;
}

/**
 * A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
 * @export
 * @interface HttpRequest
 */
export interface HttpRequest {
    /**
     * The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
     * @type {string}
     * @memberof HttpRequest
     */
    cacheFillBytes?: string;
    /**
     * Whether or not an entity was served from cache (with or without validation).
     * @type {boolean}
     * @memberof HttpRequest
     */
    cacheHit?: boolean;
    /**
     * Whether or not a cache lookup was attempted.
     * @type {boolean}
     * @memberof HttpRequest
     */
    cacheLookup?: boolean;
    /**
     * Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if cache_hit is True.
     * @type {boolean}
     * @memberof HttpRequest
     */
    cacheValidatedWithOriginServer?: boolean;
    /**
     * The request processing latency on the server, from the time the request was received until the response was sent.
     * @type {string}
     * @memberof HttpRequest
     */
    latency?: string;
    /**
     * Protocol used for the request. Examples: \"HTTP/1.1\", \"HTTP/2\", \"websocket\"
     * @type {string}
     * @memberof HttpRequest
     */
    protocol?: string;
    /**
     * The referer URL of the request, as defined in HTTP/1.1 Header Field Definitions (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
     * @type {string}
     * @memberof HttpRequest
     */
    referer?: string;
    /**
     * The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: \"192.168.1.1\", \"FE80::0202:B3FF:FE1E:8329\".
     * @type {string}
     * @memberof HttpRequest
     */
    remoteIp?: string;
    /**
     * The request method. Examples: \"GET\", \"HEAD\", \"PUT\", \"POST\".
     * @type {string}
     * @memberof HttpRequest
     */
    requestMethod?: string;
    /**
     * The size of the HTTP request message in bytes, including the request headers and the request body.
     * @type {string}
     * @memberof HttpRequest
     */
    requestSize?: string;
    /**
     * The scheme (http, https), the host name, the path and the query portion of the URL that was requested. Example: \"http://example.com/some/info?color=red\".
     * @type {string}
     * @memberof HttpRequest
     */
    requestUrl?: string;
    /**
     * The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
     * @type {string}
     * @memberof HttpRequest
     */
    responseSize?: string;
    /**
     * The IP address (IPv4 or IPv6) of the origin server that the request was sent to.
     * @type {string}
     * @memberof HttpRequest
     */
    serverIp?: string;
    /**
     * The response code indicating the status of response. Examples: 200, 404.
     * @type {number}
     * @memberof HttpRequest
     */
    status?: number;
    /**
     * The user agent sent by the client. Example: \"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)\".
     * @type {string}
     * @memberof HttpRequest
     */
    userAgent?: string;
}

/**
 * A description of a label.
 * @export
 * @interface LabelDescriptor
 */
export interface LabelDescriptor {
    /**
     * A human-readable description for the label.
     * @type {string}
     * @memberof LabelDescriptor
     */
    description?: string;
    /**
     * The label key.
     * @type {string}
     * @memberof LabelDescriptor
     */
    key?: string;
    /**
     * The type of data that can be assigned to the label.
     * @type {string}
     * @memberof LabelDescriptor
     */
    valueType?: LabelDescriptor.ValueTypeEnum;
}

/**
 * @export
 * @namespace LabelDescriptor
 */
export namespace LabelDescriptor {
    /**
     * @export
     * @enum {string}
     */
    export enum ValueTypeEnum {
        STRING = <any> 'STRING',
        BOOL = <any> 'BOOL',
        INT64 = <any> 'INT64'
    }
}

/**
 * Specifies a linear sequence of buckets that all have the same width (except overflow and underflow). Each bucket represents a constant absolute uncertainty on the specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): offset + (width * i).  Lower bound (1 <= i < N): offset + (width * (i - 1)).
 * @export
 * @interface Linear
 */
export interface Linear {
    /**
     * Must be greater than 0.
     * @type {number}
     * @memberof Linear
     */
    numFiniteBuckets?: number;
    /**
     * Lower bound of the first bucket.
     * @type {number}
     * @memberof Linear
     */
    offset?: number;
    /**
     * Must be greater than 0.
     * @type {number}
     * @memberof Linear
     */
    width?: number;
}

/**
 * Result returned from ListExclusions.
 * @export
 * @interface ListExclusionsResponse
 */
export interface ListExclusionsResponse {
    /**
     * A list of exclusions.
     * @type {Array<LogExclusion>}
     * @memberof ListExclusionsResponse
     */
    exclusions?: Array<LogExclusion>;
    /**
     * If there might be more results than appear in this response, then nextPageToken is included. To get the next set of results, call the same method again using the value of nextPageToken as pageToken.
     * @type {string}
     * @memberof ListExclusionsResponse
     */
    nextPageToken?: string;
}

/**
 * The parameters to ListLogEntries.
 * @export
 * @interface ListLogEntriesRequest
 */
export interface ListLogEntriesRequest {
    /**
     * Optional. A filter that chooses which log entries to return. See Advanced Logs Filters. Only log entries that match the filter are returned. An empty filter matches all log entries in the resources listed in resource_names. Referencing a parent resource that is not listed in resource_names will cause the filter to return no results. The maximum length of the filter is 20000 characters.
     * @type {string}
     * @memberof ListLogEntriesRequest
     */
    filter?: string;
    /**
     * Optional. How the results should be sorted. Presently, the only permitted values are \"timestamp asc\" (default) and \"timestamp desc\". The first option returns entries in order of increasing values of LogEntry.timestamp (oldest first), and the second option returns entries in order of decreasing timestamps (newest first). Entries with equal timestamps are returned in order of their insert_id values.
     * @type {string}
     * @memberof ListLogEntriesRequest
     */
    orderBy?: string;
    /**
     * Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of next_page_token in the response indicates that more results might be available.
     * @type {number}
     * @memberof ListLogEntriesRequest
     */
    pageSize?: number;
    /**
     * Optional. If present, then retrieve the next batch of results from the preceding call to this method. page_token must be the value of next_page_token from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @type {string}
     * @memberof ListLogEntriesRequest
     */
    pageToken?: string;
    /**
     * Deprecated. Use resource_names instead. One or more project identifiers or project numbers from which to retrieve log entries. Example: \"my-project-1A\".
     * @type {Array<string>}
     * @memberof ListLogEntriesRequest
     */
    projectIds?: Array<string>;
    /**
     * Required. Names of one or more parent resources from which to retrieve log entries: \"projects/[PROJECT_ID]\" \"organizations/[ORGANIZATION_ID]\" \"billingAccounts/[BILLING_ACCOUNT_ID]\" \"folders/[FOLDER_ID]\" Projects listed in the project_ids field are added to this list.
     * @type {Array<string>}
     * @memberof ListLogEntriesRequest
     */
    resourceNames?: Array<string>;
}

/**
 * Result returned from ListLogEntries.
 * @export
 * @interface ListLogEntriesResponse
 */
export interface ListLogEntriesResponse {
    /**
     * A list of log entries. If entries is empty, nextPageToken may still be returned, indicating that more entries may exist. See nextPageToken for more information.
     * @type {Array<LogEntry>}
     * @memberof ListLogEntriesResponse
     */
    entries?: Array<LogEntry>;
    /**
     * If there might be more results than those appearing in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.If a value for next_page_token appears and the entries field is empty, it means that the search found no log entries so far but it did not have time to search all the possible log entries. Retry the method with this value for page_token to continue the search. Alternatively, consider speeding up the search by changing your filter to specify a single log name or resource type, or to narrow the time range of the search.
     * @type {string}
     * @memberof ListLogEntriesResponse
     */
    nextPageToken?: string;
}

/**
 * Result returned from ListLogMetrics.
 * @export
 * @interface ListLogMetricsResponse
 */
export interface ListLogMetricsResponse {
    /**
     * A list of logs-based metrics.
     * @type {Array<LogMetric>}
     * @memberof ListLogMetricsResponse
     */
    metrics?: Array<LogMetric>;
    /**
     * If there might be more results than appear in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.
     * @type {string}
     * @memberof ListLogMetricsResponse
     */
    nextPageToken?: string;
}

/**
 * Result returned from ListLogs.
 * @export
 * @interface ListLogsResponse
 */
export interface ListLogsResponse {
    /**
     * A list of log names. For example, \"projects/my-project/logs/syslog\" or \"organizations/123/logs/cloudresourcemanager.googleapis.com%2Factivity\".
     * @type {Array<string>}
     * @memberof ListLogsResponse
     */
    logNames?: Array<string>;
    /**
     * If there might be more results than those appearing in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.
     * @type {string}
     * @memberof ListLogsResponse
     */
    nextPageToken?: string;
}

/**
 * Result returned from ListMonitoredResourceDescriptors.
 * @export
 * @interface ListMonitoredResourceDescriptorsResponse
 */
export interface ListMonitoredResourceDescriptorsResponse {
    /**
     * If there might be more results than those appearing in this response, then nextPageToken is included. To get the next set of results, call this method again using the value of nextPageToken as pageToken.
     * @type {string}
     * @memberof ListMonitoredResourceDescriptorsResponse
     */
    nextPageToken?: string;
    /**
     * A list of resource descriptors.
     * @type {Array<MonitoredResourceDescriptor>}
     * @memberof ListMonitoredResourceDescriptorsResponse
     */
    resourceDescriptors?: Array<MonitoredResourceDescriptor>;
}

/**
 * Result returned from ListSinks.
 * @export
 * @interface ListSinksResponse
 */
export interface ListSinksResponse {
    /**
     * If there might be more results than appear in this response, then nextPageToken is included. To get the next set of results, call the same method again using the value of nextPageToken as pageToken.
     * @type {string}
     * @memberof ListSinksResponse
     */
    nextPageToken?: string;
    /**
     * A list of sinks.
     * @type {Array<LogSink>}
     * @memberof ListSinksResponse
     */
    sinks?: Array<LogSink>;
}

/**
 * An individual entry in a log.
 * @export
 * @interface LogEntry
 */
export interface LogEntry {
    /**
     * Optional. Information about the HTTP request associated with this log entry, if applicable.
     * @type {HttpRequest}
     * @memberof LogEntry
     */
    httpRequest?: HttpRequest;
    /**
     * Optional. A unique identifier for the log entry. If you provide a value, then Logging considers other log entries in the same project, with the same timestamp, and with the same insert_id to be duplicates which can be removed. If omitted in new log entries, then Logging assigns its own unique identifier. The insert_id is also used to order log entries that have the same timestamp value.
     * @type {string}
     * @memberof LogEntry
     */
    insertId?: string;
    /**
     * The log entry payload, represented as a structure that is expressed as a JSON object.
     * @type {{ [key: string]: any; }}
     * @memberof LogEntry
     */
    jsonPayload?: { [key: string]: any; };
    /**
     * Optional. A set of user-defined (key, value) data that provides additional information about the log entry.
     * @type {{ [key: string]: string; }}
     * @memberof LogEntry
     */
    labels?: { [key: string]: string; };
    /**
     * Required. The resource name of the log to which this log entry belongs: \"projects/[PROJECT_ID]/logs/[LOG_ID]\" \"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\" \"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\" \"folders/[FOLDER_ID]/logs/[LOG_ID]\" A project number may optionally be used in place of PROJECT_ID. The project number is translated to its corresponding PROJECT_ID internally and the log_name field will contain PROJECT_ID in queries and exports.[LOG_ID] must be URL-encoded within log_name. Example: \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\". [LOG_ID] must be less than 512 characters long and can only include the following characters: upper and lower case alphanumeric characters, forward-slash, underscore, hyphen, and period.For backward compatibility, if log_name begins with a forward-slash, such as /projects/..., then the log entry is ingested as usual but the forward-slash is removed. Listing the log entry will not show the leading slash and filtering for a log name with a leading slash will never return any results.
     * @type {string}
     * @memberof LogEntry
     */
    logName?: string;
    /**
     * Deprecated. Output only. Additional metadata about the monitored resource.Only k8s_container, k8s_pod, and k8s_node MonitoredResources have this field populated for GKE versions older than 1.12.6. For GKE versions 1.12.6 and above, the metadata field has been deprecated. The Kubernetes pod labels that used to be in metadata.userLabels will now be present in the labels field with a key prefix of k8s-pod/. The Stackdriver system labels that were present in the metadata.systemLabels field will no longer be available in the LogEntry.
     * @type {MonitoredResourceMetadata}
     * @memberof LogEntry
     */
    metadata?: MonitoredResourceMetadata;
    /**
     * Optional. Information about an operation associated with the log entry, if applicable.
     * @type {LogEntryOperation}
     * @memberof LogEntry
     */
    operation?: LogEntryOperation;
    /**
     * The log entry payload, represented as a protocol buffer. Some Google Cloud Platform services use this field for their log entry payloads.The following protocol buffer types are supported; user-defined types are not supported:\"type.googleapis.com/google.cloud.audit.AuditLog\"  \"type.googleapis.com/google.appengine.logging.v1.RequestLog\"
     * @type {{ [key: string]: any; }}
     * @memberof LogEntry
     */
    protoPayload?: { [key: string]: any; };
    /**
     * Output only. The time the log entry was received by Logging.
     * @type {string}
     * @memberof LogEntry
     */
    receiveTimestamp?: string;
    /**
     * Required. The monitored resource that produced this log entry.Example: a log entry that reports a database error would be associated with the monitored resource designating the particular database that reported the error.
     * @type {MonitoredResource}
     * @memberof LogEntry
     */
    resource?: MonitoredResource;
    /**
     * Optional. The severity of the log entry. The default value is LogSeverity.DEFAULT.
     * @type {string}
     * @memberof LogEntry
     */
    severity?: LogEntry.SeverityEnum;
    /**
     * Optional. Source code location information associated with the log entry, if any.
     * @type {LogEntrySourceLocation}
     * @memberof LogEntry
     */
    sourceLocation?: LogEntrySourceLocation;
    /**
     * Optional. The span ID within the trace associated with the log entry.For Trace spans, this is the same format that the Trace API v2 uses: a 16-character hexadecimal encoding of an 8-byte array, such as <code>\"000000000000004a\"</code>.
     * @type {string}
     * @memberof LogEntry
     */
    spanId?: string;
    /**
     * The log entry payload, represented as a Unicode string (UTF-8).
     * @type {string}
     * @memberof LogEntry
     */
    textPayload?: string;
    /**
     * Optional. The time the event described by the log entry occurred. This time is used to compute the log entry's age and to enforce the logs retention period. If this field is omitted in a new log entry, then Logging assigns it the current time. Timestamps have nanosecond accuracy, but trailing zeros in the fractional seconds might be omitted when the timestamp is displayed.Incoming log entries should have timestamps that are no more than the logs retention period in the past, and no more than 24 hours in the future. Log entries outside those time boundaries will not be available when calling entries.list, but those log entries can still be exported with LogSinks.
     * @type {string}
     * @memberof LogEntry
     */
    timestamp?: string;
    /**
     * Optional. Resource name of the trace associated with the log entry, if any. If it contains a relative resource name, the name is assumed to be relative to //tracing.googleapis.com. Example: projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824
     * @type {string}
     * @memberof LogEntry
     */
    trace?: string;
    /**
     * Optional. The sampling decision of the trace associated with the log entry.True means that the trace resource name in the trace field was sampled for storage in a trace backend. False means that the trace was not sampled for storage when this log entry was written, or the sampling decision was unknown at the time. A non-sampled trace value is still useful as a request correlation identifier. The default is False.
     * @type {boolean}
     * @memberof LogEntry
     */
    traceSampled?: boolean;
}

/**
 * @export
 * @namespace LogEntry
 */
export namespace LogEntry {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        DEFAULT = <any> 'DEFAULT',
        DEBUG = <any> 'DEBUG',
        INFO = <any> 'INFO',
        NOTICE = <any> 'NOTICE',
        WARNING = <any> 'WARNING',
        ERROR = <any> 'ERROR',
        CRITICAL = <any> 'CRITICAL',
        ALERT = <any> 'ALERT',
        EMERGENCY = <any> 'EMERGENCY'
    }
}

/**
 * Additional information about a potentially long-running operation with which a log entry is associated.
 * @export
 * @interface LogEntryOperation
 */
export interface LogEntryOperation {
    /**
     * Optional. Set this to True if this is the first log entry in the operation.
     * @type {boolean}
     * @memberof LogEntryOperation
     */
    first?: boolean;
    /**
     * Optional. An arbitrary operation identifier. Log entries with the same identifier are assumed to be part of the same operation.
     * @type {string}
     * @memberof LogEntryOperation
     */
    id?: string;
    /**
     * Optional. Set this to True if this is the last log entry in the operation.
     * @type {boolean}
     * @memberof LogEntryOperation
     */
    last?: boolean;
    /**
     * Optional. An arbitrary producer identifier. The combination of id and producer must be globally unique. Examples for producer: \"MyDivision.MyBigCompany.com\", \"github.com/MyProject/MyApplication\".
     * @type {string}
     * @memberof LogEntryOperation
     */
    producer?: string;
}

/**
 * Additional information about the source code location that produced the log entry.
 * @export
 * @interface LogEntrySourceLocation
 */
export interface LogEntrySourceLocation {
    /**
     * Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
     * @type {string}
     * @memberof LogEntrySourceLocation
     */
    file?: string;
    /**
     * Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).
     * @type {string}
     * @memberof LogEntrySourceLocation
     */
    _function?: string;
    /**
     * Optional. Line within the source file. 1-based; 0 indicates no line number available.
     * @type {string}
     * @memberof LogEntrySourceLocation
     */
    line?: string;
}

/**
 * Specifies a set of log entries that are not to be stored in Logging. If your GCP resource receives a large volume of logs, you can use exclusions to reduce your chargeable logs. Exclusions are processed after log sinks, so you can export log entries before they are excluded. Note that organization-level and folder-level exclusions don't apply to child resources, and that you can't exclude audit log entries.
 * @export
 * @interface LogExclusion
 */
export interface LogExclusion {
    /**
     * Output only. The creation timestamp of the exclusion.This field may not be present for older exclusions.
     * @type {string}
     * @memberof LogExclusion
     */
    createTime?: string;
    /**
     * Optional. A description of this exclusion.
     * @type {string}
     * @memberof LogExclusion
     */
    description?: string;
    /**
     * Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
     * @type {boolean}
     * @memberof LogExclusion
     */
    disabled?: boolean;
    /**
     * Required. An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:\"resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)\"
     * @type {string}
     * @memberof LogExclusion
     */
    filter?: string;
    /**
     * Required. A client-assigned identifier, such as \"load-balancer-exclusion\". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods.
     * @type {string}
     * @memberof LogExclusion
     */
    name?: string;
    /**
     * Output only. The last update timestamp of the exclusion.This field may not be present for older exclusions.
     * @type {string}
     * @memberof LogExclusion
     */
    updateTime?: string;
}

/**
 * Application log line emitted while processing a request.
 * @export
 * @interface LogLine
 */
export interface LogLine {
    /**
     * App-provided log message.
     * @type {string}
     * @memberof LogLine
     */
    logMessage?: string;
    /**
     * Severity of this log entry.
     * @type {string}
     * @memberof LogLine
     */
    severity?: LogLine.SeverityEnum;
    /**
     * Where in the source code this log message was written.
     * @type {SourceLocation}
     * @memberof LogLine
     */
    sourceLocation?: SourceLocation;
    /**
     * Approximate time when this log entry was made.
     * @type {string}
     * @memberof LogLine
     */
    time?: string;
}

/**
 * @export
 * @namespace LogLine
 */
export namespace LogLine {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        DEFAULT = <any> 'DEFAULT',
        DEBUG = <any> 'DEBUG',
        INFO = <any> 'INFO',
        NOTICE = <any> 'NOTICE',
        WARNING = <any> 'WARNING',
        ERROR = <any> 'ERROR',
        CRITICAL = <any> 'CRITICAL',
        ALERT = <any> 'ALERT',
        EMERGENCY = <any> 'EMERGENCY'
    }
}

/**
 * Describes a logs-based metric. The value of the metric is the number of log entries that match a logs filter in a given time interval.Logs-based metric can also be used to extract values from logs and create a a distribution of the values. The distribution records the statistics of the extracted values along with an optional histogram of the values as specified by the bucket options.
 * @export
 * @interface LogMetric
 */
export interface LogMetric {
    /**
     * Optional. The bucket_options are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
     * @type {BucketOptions}
     * @memberof LogMetric
     */
    bucketOptions?: BucketOptions;
    /**
     * Output only. The creation timestamp of the metric.This field may not be present for older metrics.
     * @type {string}
     * @memberof LogMetric
     */
    createTime?: string;
    /**
     * Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
     * @type {string}
     * @memberof LogMetric
     */
    description?: string;
    /**
     * Required. An advanced logs filter which is used to match log entries. Example: \"resource.type=gae_app AND severity>=ERROR\" The maximum length of the filter is 20000 characters.
     * @type {string}
     * @memberof LogMetric
     */
    filter?: string;
    /**
     * Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
     * @type {{ [key: string]: string; }}
     * @memberof LogMetric
     */
    labelExtractors?: { [key: string]: string; };
    /**
     * Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of \"1\". Such a metric counts the number of log entries matching the filter expression.The name, type, and description fields in the metric_descriptor are output only, and is constructed using the name and description field in the LogMetric.To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a value_extractor expression in the LogMetric.Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the label_extractors map.The metric_kind and value_type fields in the metric_descriptor cannot be updated once initially configured. New labels can be added in the metric_descriptor, but existing labels cannot be modified except for their description.
     * @type {MetricDescriptor}
     * @memberof LogMetric
     */
    metricDescriptor?: MetricDescriptor;
    /**
     * Required. The client-assigned metric identifier. Examples: \"error_count\", \"nginx/requests\".Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.The metric identifier in this field must not be URL-encoded (https://en.wikipedia.org/wiki/Percent-encoding). However, when the metric identifier appears as the [METRIC_ID] part of a metric_name API parameter, then the metric identifier must be URL-encoded. Example: \"projects/my-project/metrics/nginx%2Frequests\".
     * @type {string}
     * @memberof LogMetric
     */
    name?: string;
    /**
     * Output only. The last update timestamp of the metric.This field may not be present for older metrics.
     * @type {string}
     * @memberof LogMetric
     */
    updateTime?: string;
    /**
     * Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument are:  1. field: The name of the log entry field from which the value is to be  extracted.  2. regex: A regular expression using the Google RE2 syntax  (https://github.com/google/re2/wiki/Syntax) with a single capture  group to extract data from the specified log entry field. The value  of the field is converted to a string before applying the regex.  It is an error to specify a regex that does not include exactly one  capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, \".*quantity=(\\d+).*\")
     * @type {string}
     * @memberof LogMetric
     */
    valueExtractor?: string;
    /**
     * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
     * @type {string}
     * @memberof LogMetric
     */
    version?: LogMetric.VersionEnum;
}

/**
 * @export
 * @namespace LogMetric
 */
export namespace LogMetric {
    /**
     * @export
     * @enum {string}
     */
    export enum VersionEnum {
        V2 = <any> 'V2',
        V1 = <any> 'V1'
    }
}

/**
 * Describes a sink used to export log entries to one of the following destinations in any project: a Cloud Storage bucket, a BigQuery dataset, or a Cloud Pub/Sub topic. A logs filter controls which log entries are exported. The sink must be created within a project, organization, billing account, or folder.
 * @export
 * @interface LogSink
 */
export interface LogSink {
    /**
     * Optional. Options that affect sinks exporting data to BigQuery.
     * @type {BigQueryOptions}
     * @memberof LogSink
     */
    bigqueryOptions?: BigQueryOptions;
    /**
     * Output only. The creation timestamp of the sink.This field may not be present for older sinks.
     * @type {string}
     * @memberof LogSink
     */
    createTime?: string;
    /**
     * Required. The export destination: \"storage.googleapis.com/[GCS_BUCKET]\" \"bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]\" \"pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]\" The sink's writer_identity, set when the sink is created, must have permission to write to the destination or else the log entries are not exported. For more information, see Exporting Logs with Sinks.
     * @type {string}
     * @memberof LogSink
     */
    destination?: string;
    /**
     * Optional. An advanced logs filter. The only exported log entries are those that are in the resource owning the sink and that match the filter. For example: logName=\"projects/[PROJECT_ID]/logs/[LOG_ID]\" AND severity>=ERROR 
     * @type {string}
     * @memberof LogSink
     */
    filter?: string;
    /**
     * Optional. This field applies only to sinks owned by organizations and folders. If the field is false, the default, only the logs owned by the sink's parent resource are available for export. If the field is true, then logs from all the projects, folders, and billing accounts contained in the sink's parent resource are also available for export. Whether a particular log entry from the children is exported depends on the sink's filter expression. For example, if this field is true, then the filter resource.type=gce_instance would export all Compute Engine VM instance log entries from all projects in the sink's parent. To only export entries from certain child projects, filter on the project part of the log name: logName:(\"projects/test-project1/\" OR \"projects/test-project2/\") AND resource.type=gce_instance 
     * @type {boolean}
     * @memberof LogSink
     */
    includeChildren?: boolean;
    /**
     * Required. The client-assigned sink identifier, unique within the project. Example: \"my-syslog-errors-to-pubsub\". Sink identifiers are limited to 100 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
     * @type {string}
     * @memberof LogSink
     */
    name?: string;
    /**
     * Deprecated. The log entry format to use for this sink's exported log entries. The v2 format is used by default and cannot be changed.
     * @type {string}
     * @memberof LogSink
     */
    outputVersionFormat?: LogSink.OutputVersionFormatEnum;
    /**
     * Output only. The last update timestamp of the sink.This field may not be present for older sinks.
     * @type {string}
     * @memberof LogSink
     */
    updateTime?: string;
    /**
     * Output only. An IAM identity&mdash;a service account or group&mdash;under which Logging writes the exported log entries to the sink's destination. This field is set by sinks.create and sinks.update based on the value of unique_writer_identity in those methods.Until you grant this identity write-access to the destination, log entry exports from this sink will fail. For more information, see Granting Access for a Resource. Consult the destination service's documentation to determine the appropriate IAM roles to assign to the identity.
     * @type {string}
     * @memberof LogSink
     */
    writerIdentity?: string;
}

/**
 * @export
 * @namespace LogSink
 */
export namespace LogSink {
    /**
     * @export
     * @enum {string}
     */
    export enum OutputVersionFormatEnum {
        VERSIONFORMATUNSPECIFIED = <any> 'VERSION_FORMAT_UNSPECIFIED',
        V2 = <any> 'V2',
        V1 = <any> 'V1'
    }
}

/**
 * Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
 * @export
 * @interface MetricDescriptor
 */
export interface MetricDescriptor {
    /**
     * A detailed description of the metric, which can be used in documentation.
     * @type {string}
     * @memberof MetricDescriptor
     */
    description?: string;
    /**
     * A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example \"Request count\". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
     * @type {string}
     * @memberof MetricDescriptor
     */
    displayName?: string;
    /**
     * The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
     * @type {Array<LabelDescriptor>}
     * @memberof MetricDescriptor
     */
    labels?: Array<LabelDescriptor>;
    /**
     * Optional. The launch stage of the metric definition.
     * @type {string}
     * @memberof MetricDescriptor
     */
    launchStage?: MetricDescriptor.LaunchStageEnum;
    /**
     * Optional. Metadata which can be used to guide usage of the metric.
     * @type {MetricDescriptorMetadata}
     * @memberof MetricDescriptor
     */
    metadata?: MetricDescriptorMetadata;
    /**
     * Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
     * @type {string}
     * @memberof MetricDescriptor
     */
    metricKind?: MetricDescriptor.MetricKindEnum;
    /**
     * The resource name of the metric descriptor.
     * @type {string}
     * @memberof MetricDescriptor
     */
    name?: string;
    /**
     * The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: \"custom.googleapis.com/invoice/paid/amount\" \"external.googleapis.com/prometheus/up\" \"appengine.googleapis.com/http/server/response_latencies\" 
     * @type {string}
     * @memberof MetricDescriptor
     */
    type?: string;
    /**
     * The unit in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The supported units are a subset of The Unified Code for Units of Measure (http://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d dayPrefixes (PREFIX) k kilo (10**3) M mega (10**6) G giga (10**9) T tera (10**12) P peta (10**15) E exa (10**18) Z zetta (10**21) Y yotta (10**24) m milli (10**-3) u micro (10**-6) n nano (10**-9) p pico (10**-12) f femto (10**-15) a atto (10**-18) z zepto (10**-21) y yocto (10**-24) Ki kibi (2**10) Mi mebi (2**20) Gi gibi (2**30) Ti tebi (2**40)GrammarThe grammar also includes these connectors: / division (as an infix operator, e.g. 1/s). . multiplication (as an infix operator, e.g. GBy.d)The grammar for a unit is as follows: Expression = Component { \".\" Component } { \"/\" Component } ;  Component = ( [ PREFIX ] UNIT | \"%\" ) [ Annotation ]           | Annotation           | \"1\"           ;  Annotation = \"{\" NAME \"}\" ; Notes: Annotation is just a comment if it follows a UNIT and is  equivalent to 1 if it is used alone. For examples,  {requests}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not  containing '{' or '}'. 1 represents dimensionless value 1, such as in 1/s. % represents dimensionless value 1/100, and annotates values giving  a percentage.
     * @type {string}
     * @memberof MetricDescriptor
     */
    unit?: string;
    /**
     * Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
     * @type {string}
     * @memberof MetricDescriptor
     */
    valueType?: MetricDescriptor.ValueTypeEnum;
}

/**
 * @export
 * @namespace MetricDescriptor
 */
export namespace MetricDescriptor {
    /**
     * @export
     * @enum {string}
     */
    export enum LaunchStageEnum {
        LAUNCHSTAGEUNSPECIFIED = <any> 'LAUNCH_STAGE_UNSPECIFIED',
        EARLYACCESS = <any> 'EARLY_ACCESS',
        ALPHA = <any> 'ALPHA',
        BETA = <any> 'BETA',
        GA = <any> 'GA',
        DEPRECATED = <any> 'DEPRECATED'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum MetricKindEnum {
        METRICKINDUNSPECIFIED = <any> 'METRIC_KIND_UNSPECIFIED',
        GAUGE = <any> 'GAUGE',
        DELTA = <any> 'DELTA',
        CUMULATIVE = <any> 'CUMULATIVE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ValueTypeEnum {
        VALUETYPEUNSPECIFIED = <any> 'VALUE_TYPE_UNSPECIFIED',
        BOOL = <any> 'BOOL',
        INT64 = <any> 'INT64',
        DOUBLE = <any> 'DOUBLE',
        STRING = <any> 'STRING',
        DISTRIBUTION = <any> 'DISTRIBUTION',
        MONEY = <any> 'MONEY'
    }
}

/**
 * Additional annotations that can be used to guide the usage of a metric.
 * @export
 * @interface MetricDescriptorMetadata
 */
export interface MetricDescriptorMetadata {
    /**
     * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     * @type {string}
     * @memberof MetricDescriptorMetadata
     */
    ingestDelay?: string;
    /**
     * Deprecated. Please use the MetricDescriptor.launch_stage instead. The launch stage of the metric definition.
     * @type {string}
     * @memberof MetricDescriptorMetadata
     */
    launchStage?: MetricDescriptorMetadata.LaunchStageEnum;
    /**
     * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     * @type {string}
     * @memberof MetricDescriptorMetadata
     */
    samplePeriod?: string;
}

/**
 * @export
 * @namespace MetricDescriptorMetadata
 */
export namespace MetricDescriptorMetadata {
    /**
     * @export
     * @enum {string}
     */
    export enum LaunchStageEnum {
        LAUNCHSTAGEUNSPECIFIED = <any> 'LAUNCH_STAGE_UNSPECIFIED',
        EARLYACCESS = <any> 'EARLY_ACCESS',
        ALPHA = <any> 'ALPHA',
        BETA = <any> 'BETA',
        GA = <any> 'GA',
        DEPRECATED = <any> 'DEPRECATED'
    }
}

/**
 * An object representing a resource that can be used for monitoring, logging, billing, or other purposes. Examples include virtual machine instances, databases, and storage devices such as disks. The type field identifies a MonitoredResourceDescriptor object that describes the resource's schema. Information in the labels field identifies the actual resource and its attributes according to the schema. For example, a particular Compute Engine VM instance could be represented by the following object, because the MonitoredResourceDescriptor for \"gce_instance\" has labels \"instance_id\" and \"zone\": { \"type\": \"gce_instance\",   \"labels\": { \"instance_id\": \"12345678901234\",               \"zone\": \"us-central1-a\" }} 
 * @export
 * @interface MonitoredResource
 */
export interface MonitoredResource {
    /**
     * Required. Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels \"project_id\", \"instance_id\", and \"zone\".
     * @type {{ [key: string]: string; }}
     * @memberof MonitoredResource
     */
    labels?: { [key: string]: string; };
    /**
     * Required. The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance.
     * @type {string}
     * @memberof MonitoredResource
     */
    type?: string;
}

/**
 * An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of \"gce_instance\" and specifies the use of the labels \"instance_id\" and \"zone\" to identify particular VM instances.Different APIs can support different monitored resource types. APIs generally provide a list method that returns the monitored resource descriptors used by the API.
 * @export
 * @interface MonitoredResourceDescriptor
 */
export interface MonitoredResourceDescriptor {
    /**
     * Optional. A detailed description of the monitored resource type that might be used in documentation.
     * @type {string}
     * @memberof MonitoredResourceDescriptor
     */
    description?: string;
    /**
     * Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, \"Google Cloud SQL Database\".
     * @type {string}
     * @memberof MonitoredResourceDescriptor
     */
    displayName?: string;
    /**
     * Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels \"database_id\" and \"zone\".
     * @type {Array<LabelDescriptor>}
     * @memberof MonitoredResourceDescriptor
     */
    labels?: Array<LabelDescriptor>;
    /**
     * Optional. The launch stage of the monitored resource definition.
     * @type {string}
     * @memberof MonitoredResourceDescriptor
     */
    launchStage?: MonitoredResourceDescriptor.LaunchStageEnum;
    /**
     * Optional. The resource name of the monitored resource descriptor: \"projects/{project_id}/monitoredResourceDescriptors/{type}\" where {type} is the value of the type field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format \"monitoredResourceDescriptors/{type}\".
     * @type {string}
     * @memberof MonitoredResourceDescriptor
     */
    name?: string;
    /**
     * Required. The monitored resource type. For example, the type \"cloudsql_database\" represents databases in Google Cloud SQL. The maximum length of this value is 256 characters.
     * @type {string}
     * @memberof MonitoredResourceDescriptor
     */
    type?: string;
}

/**
 * @export
 * @namespace MonitoredResourceDescriptor
 */
export namespace MonitoredResourceDescriptor {
    /**
     * @export
     * @enum {string}
     */
    export enum LaunchStageEnum {
        LAUNCHSTAGEUNSPECIFIED = <any> 'LAUNCH_STAGE_UNSPECIFIED',
        EARLYACCESS = <any> 'EARLY_ACCESS',
        ALPHA = <any> 'ALPHA',
        BETA = <any> 'BETA',
        GA = <any> 'GA',
        DEPRECATED = <any> 'DEPRECATED'
    }
}

/**
 * Auxiliary metadata for a MonitoredResource object. MonitoredResource objects contain the minimum set of information to uniquely identify a monitored resource instance. There is some other useful auxiliary metadata. Monitoring and Logging use an ingestion pipeline to extract metadata for cloud resources of all types, and store the metadata in this message.
 * @export
 * @interface MonitoredResourceMetadata
 */
export interface MonitoredResourceMetadata {
    /**
     * Output only. Values for predefined system metadata labels. System labels are a kind of metadata extracted by Google, including \"machine_image\", \"vpc\", \"subnet_id\", \"security_group\", \"name\", etc. System label values can be only strings, Boolean values, or a list of strings. For example: { \"name\": \"my-test-instance\",   \"security_group\": [\"a\", \"b\", \"c\"],   \"spot_instance\": false } 
     * @type {{ [key: string]: any; }}
     * @memberof MonitoredResourceMetadata
     */
    systemLabels?: { [key: string]: any; };
    /**
     * Output only. A map of user-defined metadata labels.
     * @type {{ [key: string]: string; }}
     * @memberof MonitoredResourceMetadata
     */
    userLabels?: { [key: string]: string; };
}

/**
 * Complete log information about a single HTTP request to an App Engine application.
 * @export
 * @interface RequestLog
 */
export interface RequestLog {
    /**
     * App Engine release version.
     * @type {string}
     * @memberof RequestLog
     */
    appEngineRelease?: string;
    /**
     * Application that handled this request.
     * @type {string}
     * @memberof RequestLog
     */
    appId?: string;
    /**
     * An indication of the relative cost of serving this request.
     * @type {number}
     * @memberof RequestLog
     */
    cost?: number;
    /**
     * Time when the request finished.
     * @type {string}
     * @memberof RequestLog
     */
    endTime?: string;
    /**
     * Whether this request is finished or active.
     * @type {boolean}
     * @memberof RequestLog
     */
    finished?: boolean;
    /**
     * Whether this is the first RequestLog entry for this request. If an active request has several RequestLog entries written to Stackdriver Logging, then this field will be set for one of them.
     * @type {boolean}
     * @memberof RequestLog
     */
    first?: boolean;
    /**
     * Internet host and port number of the resource being requested.
     * @type {string}
     * @memberof RequestLog
     */
    host?: string;
    /**
     * HTTP version of request. Example: \"HTTP/1.1\".
     * @type {string}
     * @memberof RequestLog
     */
    httpVersion?: string;
    /**
     * An identifier for the instance that handled the request.
     * @type {string}
     * @memberof RequestLog
     */
    instanceId?: string;
    /**
     * If the instance processing this request belongs to a manually scaled module, then this is the 0-based index of the instance. Otherwise, this value is -1.
     * @type {number}
     * @memberof RequestLog
     */
    instanceIndex?: number;
    /**
     * Origin IP address.
     * @type {string}
     * @memberof RequestLog
     */
    ip?: string;
    /**
     * Latency of the request.
     * @type {string}
     * @memberof RequestLog
     */
    latency?: string;
    /**
     * A list of log lines emitted by the application while serving this request.
     * @type {Array<LogLine>}
     * @memberof RequestLog
     */
    line?: Array<LogLine>;
    /**
     * Number of CPU megacycles used to process request.
     * @type {string}
     * @memberof RequestLog
     */
    megaCycles?: string;
    /**
     * Request method. Example: \"GET\", \"HEAD\", \"PUT\", \"POST\", \"DELETE\".
     * @type {string}
     * @memberof RequestLog
     */
    method?: string;
    /**
     * Module of the application that handled this request.
     * @type {string}
     * @memberof RequestLog
     */
    moduleId?: string;
    /**
     * The logged-in user who made the request.Most likely, this is the part of the user's email before the @ sign. The field value is the same for different requests from the same user, but different users can have similar names. This information is also available to the application via the App Engine Users API.This field will be populated starting with App Engine 1.9.21.
     * @type {string}
     * @memberof RequestLog
     */
    nickname?: string;
    /**
     * Time this request spent in the pending request queue.
     * @type {string}
     * @memberof RequestLog
     */
    pendingTime?: string;
    /**
     * Referrer URL of request.
     * @type {string}
     * @memberof RequestLog
     */
    referrer?: string;
    /**
     * Globally unique identifier for a request, which is based on the request start time. Request IDs for requests which started later will compare greater as strings than those for requests which started earlier.
     * @type {string}
     * @memberof RequestLog
     */
    requestId?: string;
    /**
     * Contains the path and query portion of the URL that was requested. For example, if the URL was \"http://example.com/app?name=val\", the resource would be \"/app?name=val\". The fragment identifier, which is identified by the # character, is not included.
     * @type {string}
     * @memberof RequestLog
     */
    resource?: string;
    /**
     * Size in bytes sent back to client by request.
     * @type {string}
     * @memberof RequestLog
     */
    responseSize?: string;
    /**
     * Source code for the application that handled this request. There can be more than one source reference per deployed application if source code is distributed among multiple repositories.
     * @type {Array<SourceReference>}
     * @memberof RequestLog
     */
    sourceReference?: Array<SourceReference>;
    /**
     * Time when the request started.
     * @type {string}
     * @memberof RequestLog
     */
    startTime?: string;
    /**
     * HTTP response status code. Example: 200, 404.
     * @type {number}
     * @memberof RequestLog
     */
    status?: number;
    /**
     * Task name of the request, in the case of an offline request.
     * @type {string}
     * @memberof RequestLog
     */
    taskName?: string;
    /**
     * Queue name of the request, in the case of an offline request.
     * @type {string}
     * @memberof RequestLog
     */
    taskQueueName?: string;
    /**
     * Stackdriver Trace identifier for this request.
     * @type {string}
     * @memberof RequestLog
     */
    traceId?: string;
    /**
     * If true, the value in the 'trace_id' field was sampled for storage in a trace backend.
     * @type {boolean}
     * @memberof RequestLog
     */
    traceSampled?: boolean;
    /**
     * File or class that handled the request.
     * @type {string}
     * @memberof RequestLog
     */
    urlMapEntry?: string;
    /**
     * User agent that made the request.
     * @type {string}
     * @memberof RequestLog
     */
    userAgent?: string;
    /**
     * Version of the application that handled this request.
     * @type {string}
     * @memberof RequestLog
     */
    versionId?: string;
    /**
     * Whether this was a loading request for the instance.
     * @type {boolean}
     * @memberof RequestLog
     */
    wasLoadingRequest?: boolean;
}

/**
 * Specifies a location in a source code file.
 * @export
 * @interface SourceLocation
 */
export interface SourceLocation {
    /**
     * Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
     * @type {string}
     * @memberof SourceLocation
     */
    file?: string;
    /**
     * Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information is used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).
     * @type {string}
     * @memberof SourceLocation
     */
    functionName?: string;
    /**
     * Line within the source file.
     * @type {string}
     * @memberof SourceLocation
     */
    line?: string;
}

/**
 * A reference to a particular snapshot of the source tree used to build and deploy an application.
 * @export
 * @interface SourceReference
 */
export interface SourceReference {
    /**
     * Optional. A URI string identifying the repository. Example: \"https://github.com/GoogleCloudPlatform/kubernetes.git\"
     * @type {string}
     * @memberof SourceReference
     */
    repository?: string;
    /**
     * The canonical and persistent identifier of the deployed revision. Example (git): \"0035781c50ec7aa23385dc841529ce8a4b70db1b\"
     * @type {string}
     * @memberof SourceReference
     */
    revisionId?: string;
}

/**
 * The parameters to WriteLogEntries.
 * @export
 * @interface WriteLogEntriesRequest
 */
export interface WriteLogEntriesRequest {
    /**
     * Optional. If true, the request should expect normal response, but the entries won't be persisted nor exported. Useful for checking whether the logging API endpoints are working properly before sending valuable data.
     * @type {boolean}
     * @memberof WriteLogEntriesRequest
     */
    dryRun?: boolean;
    /**
     * Required. The log entries to send to Logging. The order of log entries in this list does not matter. Values supplied in this method's log_name, resource, and labels fields are copied into those log entries in this list that do not include values for their corresponding fields. For more information, see the LogEntry type.If the timestamp or insert_id fields are missing in log entries, then this method supplies the current time or a unique identifier, respectively. The supplied values are chosen so that, among the log entries that did not supply their own values, the entries earlier in the list will sort before the entries later in the list. See the entries.list method.Log entries with timestamps that are more than the logs retention period in the past or more than 24 hours in the future will not be available when calling entries.list. However, those log entries can still be exported with LogSinks.To improve throughput and to avoid exceeding the quota limit for calls to entries.write, you should try to include several log entries in this list, rather than calling this method for each individual log entry.
     * @type {Array<LogEntry>}
     * @memberof WriteLogEntriesRequest
     */
    entries?: Array<LogEntry>;
    /**
     * Optional. Default labels that are added to the labels field of all log entries in entries. If a log entry already has a label with the same key as a label in this parameter, then the log entry's label is not changed. See LogEntry.
     * @type {{ [key: string]: string; }}
     * @memberof WriteLogEntriesRequest
     */
    labels?: { [key: string]: string; };
    /**
     * Optional. A default log resource name that is assigned to all log entries in entries that do not specify a value for log_name: \"projects/[PROJECT_ID]/logs/[LOG_ID]\" \"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\" \"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\" \"folders/[FOLDER_ID]/logs/[LOG_ID]\" [LOG_ID] must be URL-encoded. For example: \"projects/my-project-id/logs/syslog\" \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\" The permission <code>logging.logEntries.create</code> is needed on each project, organization, billing account, or folder that is receiving new log entries, whether the resource is specified in <code>logName</code> or in an individual log entry.
     * @type {string}
     * @memberof WriteLogEntriesRequest
     */
    logName?: string;
    /**
     * Optional. Whether valid entries should be written even if some other entries fail due to INVALID_ARGUMENT or PERMISSION_DENIED errors. If any entry is not written, then the response status is the error associated with one of the failed entries and the response includes error details keyed by the entries' zero-based index in the entries.write method.
     * @type {boolean}
     * @memberof WriteLogEntriesRequest
     */
    partialSuccess?: boolean;
    /**
     * Optional. A default monitored resource object that is assigned to all log entries in entries that do not specify a value for resource. Example: { \"type\": \"gce_instance\",   \"labels\": {     \"zone\": \"us-central1-a\", \"instance_id\": \"00000000000000000000\" }} See LogEntry.
     * @type {MonitoredResource}
     * @memberof WriteLogEntriesRequest
     */
    resource?: MonitoredResource;
}

/**
 * Result returned from WriteLogEntries. empty
 * @export
 * @interface WriteLogEntriesResponse
 */
export interface WriteLogEntriesResponse {
}


/**
 * EntriesApi - fetch parameter creator
 * @export
 */
export const EntriesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ListLogEntriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: ListLogEntriesRequest, options: any = {}): FetchArgs {
            const localVarPath = `/v2/entries:list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ListLogEntriesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {WriteLogEntriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesWrite(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: WriteLogEntriesRequest, options: any = {}): FetchArgs {
            const localVarPath = `/v2/entries:write`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WriteLogEntriesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntriesApi - functional programming interface
 * @export
 */
export const EntriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ListLogEntriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: ListLogEntriesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListLogEntriesResponse> {
            const localVarFetchArgs = EntriesApiFetchParamCreator(configuration).loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {WriteLogEntriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesWrite(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: WriteLogEntriesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WriteLogEntriesResponse> {
            const localVarFetchArgs = EntriesApiFetchParamCreator(configuration).loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EntriesApi - factory interface
 * @export
 */
export const EntriesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ListLogEntriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: ListLogEntriesRequest, options?: any) {
            return EntriesApiFp(configuration).loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
        /**
         * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {WriteLogEntriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingEntriesWrite(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: WriteLogEntriesRequest, options?: any) {
            return EntriesApiFp(configuration).loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
    };
};

/**
 * EntriesApi - interface
 * @export
 * @interface EntriesApi
 */
export interface EntriesApiInterface {
    /**
     * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {ListLogEntriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApiInterface
     */
    loggingEntriesList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: ListLogEntriesRequest, options?: any): Promise<ListLogEntriesResponse>;

    /**
     * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {WriteLogEntriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApiInterface
     */
    loggingEntriesWrite(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: WriteLogEntriesRequest, options?: any): Promise<WriteLogEntriesResponse>;

}

/**
 * EntriesApi - object-oriented interface
 * @export
 * @class EntriesApi
 * @extends {BaseAPI}
 */
export class EntriesApi extends BaseAPI implements EntriesApiInterface {
    /**
     * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {ListLogEntriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public loggingEntriesList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: ListLogEntriesRequest, options?: any) {
        return EntriesApiFp(this.configuration).loggingEntriesList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {WriteLogEntriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public loggingEntriesWrite(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: WriteLogEntriesRequest, options?: any) {
        return EntriesApiFp(this.configuration).loggingEntriesWrite(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }

}

/**
 * MonitoredResourceDescriptorsApi - fetch parameter creator
 * @export
 */
export const MonitoredResourceDescriptorsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists the descriptors for monitored resource types used by Logging.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingMonitoredResourceDescriptorsList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v2/monitoredResourceDescriptors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MonitoredResourceDescriptorsApi - functional programming interface
 * @export
 */
export const MonitoredResourceDescriptorsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Lists the descriptors for monitored resource types used by Logging.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingMonitoredResourceDescriptorsList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListMonitoredResourceDescriptorsResponse> {
            const localVarFetchArgs = MonitoredResourceDescriptorsApiFetchParamCreator(configuration).loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MonitoredResourceDescriptorsApi - factory interface
 * @export
 */
export const MonitoredResourceDescriptorsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Lists the descriptors for monitored resource types used by Logging.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingMonitoredResourceDescriptorsList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
            return MonitoredResourceDescriptorsApiFp(configuration).loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
    };
};

/**
 * MonitoredResourceDescriptorsApi - interface
 * @export
 * @interface MonitoredResourceDescriptorsApi
 */
export interface MonitoredResourceDescriptorsApiInterface {
    /**
     * Lists the descriptors for monitored resource types used by Logging.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoredResourceDescriptorsApiInterface
     */
    loggingMonitoredResourceDescriptorsList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): Promise<ListMonitoredResourceDescriptorsResponse>;

}

/**
 * MonitoredResourceDescriptorsApi - object-oriented interface
 * @export
 * @class MonitoredResourceDescriptorsApi
 * @extends {BaseAPI}
 */
export class MonitoredResourceDescriptorsApi extends BaseAPI implements MonitoredResourceDescriptorsApiInterface {
    /**
     * Lists the descriptors for monitored resource types used by Logging.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoredResourceDescriptorsApi
     */
    public loggingMonitoredResourceDescriptorsList(_xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
        return MonitoredResourceDescriptorsApiFp(this.configuration).loggingMonitoredResourceDescriptorsList(_xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

}

/**
 * OrganizationsApi - fetch parameter creator
 * @export
 */
export const OrganizationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
         * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling loggingOrganizationsExclusionsCreate.');
            }
            const localVarPath = `/v2/{parent}/exclusions`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LogExclusion" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsDelete(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling loggingOrganizationsExclusionsDelete.');
            }
            const localVarPath = `/v2/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the description of an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsGet(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling loggingOrganizationsExclusionsGet.');
            }
            const localVarPath = `/v2/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the exclusions in a parent resource.
         * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling loggingOrganizationsExclusionsList.');
            }
            const localVarPath = `/v2/{parent}/exclusions`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes one or more properties of an existing exclusion.
         * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body] 
         * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsPatch(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, updateMask?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling loggingOrganizationsExclusionsPatch.');
            }
            const localVarPath = `/v2/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (updateMask !== undefined) {
                localVarQueryParameter['updateMask'] = updateMask;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LogExclusion" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
         * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsDelete(logName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'logName' is not null or undefined
            if (logName === null || logName === undefined) {
                throw new RequiredError('logName','Required parameter logName was null or undefined when calling loggingOrganizationsLogsDelete.');
            }
            const localVarPath = `/v2/{logName}`
                .replace(`{${"logName"}}`, encodeURIComponent(String(logName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
         * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling loggingOrganizationsLogsList.');
            }
            const localVarPath = `/v2/{parent}/logs`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
         * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling loggingOrganizationsSinksCreate.');
            }
            const localVarPath = `/v2/{parent}/sinks`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (uniqueWriterIdentity !== undefined) {
                localVarQueryParameter['uniqueWriterIdentity'] = uniqueWriterIdentity;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LogSink" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
         * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksDelete(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName','Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksDelete.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a sink.
         * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksGet(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName','Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksGet.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists sinks.
         * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling loggingOrganizationsSinksList.');
            }
            const localVarPath = `/v2/{parent}/sinks`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksPatch(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options: any = {}): FetchArgs {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName','Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksPatch.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (uniqueWriterIdentity !== undefined) {
                localVarQueryParameter['uniqueWriterIdentity'] = uniqueWriterIdentity;
            }

            if (updateMask !== undefined) {
                localVarQueryParameter['updateMask'] = updateMask;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LogSink" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksUpdate(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options: any = {}): FetchArgs {
            // verify required parameter 'sinkName' is not null or undefined
            if (sinkName === null || sinkName === undefined) {
                throw new RequiredError('sinkName','Required parameter sinkName was null or undefined when calling loggingOrganizationsSinksUpdate.');
            }
            const localVarPath = `/v2/{sinkName}`
                .replace(`{${"sinkName"}}`, encodeURIComponent(String(sinkName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (uniqueWriterIdentity !== undefined) {
                localVarQueryParameter['uniqueWriterIdentity'] = uniqueWriterIdentity;
            }

            if (updateMask !== undefined) {
                localVarQueryParameter['updateMask'] = updateMask;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LogSink" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
         * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogExclusion> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsDelete(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Empty> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets the description of an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsGet(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogExclusion> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists all the exclusions in a parent resource.
         * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListExclusionsResponse> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Changes one or more properties of an existing exclusion.
         * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body] 
         * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsPatch(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, updateMask?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogExclusion> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
         * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsDelete(logName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Empty> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
         * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListLogsResponse> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
         * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogSink> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
         * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksDelete(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Empty> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets a sink.
         * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksGet(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogSink> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists sinks.
         * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListSinksResponse> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksPatch(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogSink> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksUpdate(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogSink> {
            const localVarFetchArgs = OrganizationsApiFetchParamCreator(configuration).loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
         * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
        /**
         * Deletes an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsDelete(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Gets the description of an exclusion.
         * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsGet(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists all the exclusions in a parent resource.
         * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Changes one or more properties of an existing exclusion.
         * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogExclusion} [body] 
         * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsExclusionsPatch(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, updateMask?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options)(fetch, basePath);
        },
        /**
         * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
         * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsDelete(logName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
         * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsLogsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
         * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options)(fetch, basePath);
        },
        /**
         * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
         * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksDelete(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Gets a sink.
         * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksGet(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists sinks.
         * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksPatch(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(fetch, basePath);
        },
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
         * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogSink} [body] 
         * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
         * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingOrganizationsSinksUpdate(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any) {
            return OrganizationsApiFp(configuration).loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(fetch, basePath);
        },
    };
};

/**
 * OrganizationsApi - interface
 * @export
 * @interface OrganizationsApi
 */
export interface OrganizationsApiInterface {
    /**
     * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
     * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogExclusion} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsExclusionsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, options?: any): Promise<LogExclusion>;

    /**
     * Deletes an exclusion.
     * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsExclusionsDelete(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): Promise<Empty>;

    /**
     * Gets the description of an exclusion.
     * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsExclusionsGet(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): Promise<LogExclusion>;

    /**
     * Lists all the exclusions in a parent resource.
     * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsExclusionsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): Promise<ListExclusionsResponse>;

    /**
     * Changes one or more properties of an existing exclusion.
     * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogExclusion} [body] 
     * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsExclusionsPatch(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, updateMask?: string, options?: any): Promise<LogExclusion>;

    /**
     * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
     * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsLogsDelete(logName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): Promise<Empty>;

    /**
     * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
     * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsLogsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): Promise<ListLogsResponse>;

    /**
     * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
     * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body] 
     * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsSinksCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, options?: any): Promise<LogSink>;

    /**
     * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
     * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsSinksDelete(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): Promise<Empty>;

    /**
     * Gets a sink.
     * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsSinksGet(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): Promise<LogSink>;

    /**
     * Lists sinks.
     * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsSinksList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): Promise<ListSinksResponse>;

    /**
     * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
     * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body] 
     * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
     * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsSinksPatch(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any): Promise<LogSink>;

    /**
     * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
     * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body] 
     * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
     * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    loggingOrganizationsSinksUpdate(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any): Promise<LogSink>;

}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI implements OrganizationsApiInterface {
    /**
     * Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
     * @param {string} parent Required. The parent resource in which to create the exclusion: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogExclusion} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsExclusionsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes an exclusion.
     * @param {string} name Required. The resource name of an existing exclusion to delete: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsExclusionsDelete(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsDelete(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }

    /**
     * Gets the description of an exclusion.
     * @param {string} name Required. The resource name of an existing exclusion: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsExclusionsGet(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsGet(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }

    /**
     * Lists all the exclusions in a parent resource.
     * @param {string} parent Required. The parent resource whose exclusions are to be listed. \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsExclusionsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * Changes one or more properties of an existing exclusion.
     * @param {string} name Required. The resource name of the exclusion to update: \&quot;projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]\&quot; \&quot;folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]\&quot; Example: \&quot;projects/my-project-id/exclusions/my-exclusion-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogExclusion} [body] 
     * @param {string} [updateMask] Required. A non-empty list of fields to change in the existing exclusion. New values for the fields are taken from the corresponding fields in the LogExclusion included in this request. Fields not mentioned in update_mask are not changed and are ignored in the request.For example, to change the filter and description of an exclusion, specify an update_mask of \&quot;filter,description\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsExclusionsPatch(name: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogExclusion, updateMask?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsExclusionsPatch(name, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, updateMask, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.
     * @param {string} logName Required. The resource name of the log to delete: \&quot;projects/[PROJECT_ID]/logs/[LOG_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\&quot; \&quot;folders/[FOLDER_ID]/logs/[LOG_ID]\&quot; [LOG_ID] must be URL-encoded. For example, \&quot;projects/my-project-id/logs/syslog\&quot;, \&quot;organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\&quot;. For more information about log names, see LogEntry.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsLogsDelete(logName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsLogsDelete(logName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }

    /**
     * Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
     * @param {string} parent Required. The resource name that owns the logs: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsLogsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsLogsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
     * @param {string} parent Required. The resource in which to create the sink: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; Examples: \&quot;projects/my-logging-project\&quot;, \&quot;organizations/123456789\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body] 
     * @param {boolean} [uniqueWriterIdentity] Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink&#39;s parent is a project, then the value returned as writer_identity is the same group or service account used by Logging before the addition of writer identities to this API. The sink&#39;s destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsSinksCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsSinksCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
     * @param {string} sinkName Required. The full resource name of the sink to delete, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsSinksDelete(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsSinksDelete(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }

    /**
     * Gets a sink.
     * @param {string} sinkName Required. The resource name of the sink: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsSinksGet(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsSinksGet(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }

    /**
     * Lists sinks.
     * @param {string} parent Required. The parent resource whose sinks are to be listed: \&quot;projects/[PROJECT_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]\&quot; \&quot;folders/[FOLDER_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsSinksList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsSinksList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
     * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body] 
     * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
     * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsSinksPatch(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsSinksPatch(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
     * @param {string} sinkName Required. The full resource name of the sink to update, including the parent resource and the sink identifier: \&quot;projects/[PROJECT_ID]/sinks/[SINK_ID]\&quot; \&quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\&quot; \&quot;billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\&quot; \&quot;folders/[FOLDER_ID]/sinks/[SINK_ID]\&quot; Example: \&quot;projects/my-project-id/sinks/my-sink-id\&quot;.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogSink} [body] 
     * @param {boolean} [uniqueWriterIdentity] Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field: If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s writer_identity. If the old value is false and the new value is true, then writer_identity is changed to a unique service account. It is an error if the old value is true and the new value is set to false or defaulted to false.
     * @param {string} [updateMask] Optional. Field mask that specifies the fields in sink that need an update. A sink field will be overwritten if, and only if, it is in the update mask. name and output only fields cannot be updated.An empty updateMask is temporarily treated as using the following mask for backwards compatibility purposes:  destination,filter,includeChildren At some point in the future, behavior will be removed and specifying an empty updateMask will be an error.For a detailed FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample: updateMask&#x3D;filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public loggingOrganizationsSinksUpdate(sinkName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogSink, uniqueWriterIdentity?: boolean, updateMask?: string, options?: any) {
        return OrganizationsApiFp(this.configuration).loggingOrganizationsSinksUpdate(sinkName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, uniqueWriterIdentity, updateMask, options)(this.fetch, this.basePath);
    }

}

/**
 * ProjectsApi - fetch parameter creator
 * @export
 */
export const ProjectsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a logs-based metric.
         * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling loggingProjectsMetricsCreate.');
            }
            const localVarPath = `/v2/{parent}/metrics`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LogMetric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a logs-based metric.
         * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsDelete(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'metricName' is not null or undefined
            if (metricName === null || metricName === undefined) {
                throw new RequiredError('metricName','Required parameter metricName was null or undefined when calling loggingProjectsMetricsDelete.');
            }
            const localVarPath = `/v2/{metricName}`
                .replace(`{${"metricName"}}`, encodeURIComponent(String(metricName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a logs-based metric.
         * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsGet(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'metricName' is not null or undefined
            if (metricName === null || metricName === undefined) {
                throw new RequiredError('metricName','Required parameter metricName was null or undefined when calling loggingProjectsMetricsGet.');
            }
            const localVarPath = `/v2/{metricName}`
                .replace(`{${"metricName"}}`, encodeURIComponent(String(metricName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists logs-based metrics.
         * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling loggingProjectsMetricsList.');
            }
            const localVarPath = `/v2/{parent}/metrics`
                .replace(`{${"parent"}}`, encodeURIComponent(String(parent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.read"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or updates a logs-based metric.
         * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsUpdate(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options: any = {}): FetchArgs {
            // verify required parameter 'metricName' is not null or undefined
            if (metricName === null || metricName === undefined) {
                throw new RequiredError('metricName','Required parameter metricName was null or undefined when calling loggingProjectsMetricsUpdate.');
            }
            const localVarPath = `/v2/{metricName}`
                .replace(`{${"metricName"}}`, encodeURIComponent(String(metricName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2c required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2c", ["https://www.googleapis.com/auth/logging.write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = _xgafv;
            }

            if (access_token !== undefined) {
                localVarQueryParameter['access_token'] = access_token;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauth_token !== undefined) {
                localVarQueryParameter['oauth_token'] = oauth_token;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (upload_protocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = upload_protocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LogMetric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a logs-based metric.
         * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogMetric> {
            const localVarFetchArgs = ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a logs-based metric.
         * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsDelete(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Empty> {
            const localVarFetchArgs = ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets a logs-based metric.
         * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsGet(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogMetric> {
            const localVarFetchArgs = ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists logs-based metrics.
         * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListLogMetricsResponse> {
            const localVarFetchArgs = ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates or updates a logs-based metric.
         * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsUpdate(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogMetric> {
            const localVarFetchArgs = ProjectsApiFetchParamCreator(configuration).loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a logs-based metric.
         * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any) {
            return ProjectsApiFp(configuration).loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
        /**
         * Deletes a logs-based metric.
         * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsDelete(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
            return ProjectsApiFp(configuration).loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Gets a logs-based metric.
         * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsGet(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
            return ProjectsApiFp(configuration).loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(fetch, basePath);
        },
        /**
         * Lists logs-based metrics.
         * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot; 
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
         * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
            return ProjectsApiFp(configuration).loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * Creates or updates a logs-based metric.
         * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
         * @param {'1' | '2'} [_xgafv] V1 error format.
         * @param {string} [access_token] OAuth access token.
         * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauth_token] OAuth 2.0 token for the current user.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {LogMetric} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggingProjectsMetricsUpdate(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any) {
            return ProjectsApiFp(configuration).loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectsApi - interface
 * @export
 * @interface ProjectsApi
 */
export interface ProjectsApiInterface {
    /**
     * Creates a logs-based metric.
     * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogMetric} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    loggingProjectsMetricsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any): Promise<LogMetric>;

    /**
     * Deletes a logs-based metric.
     * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    loggingProjectsMetricsDelete(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): Promise<Empty>;

    /**
     * Gets a logs-based metric.
     * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    loggingProjectsMetricsGet(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any): Promise<LogMetric>;

    /**
     * Lists logs-based metrics.
     * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    loggingProjectsMetricsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any): Promise<ListLogMetricsResponse>;

    /**
     * Creates or updates a logs-based metric.
     * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogMetric} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    loggingProjectsMetricsUpdate(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any): Promise<LogMetric>;

}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI implements ProjectsApiInterface {
    /**
     * Creates a logs-based metric.
     * @param {string} parent The resource name of the project in which to create the metric: \&quot;projects/[PROJECT_ID]\&quot; The new metric must be provided in the request.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogMetric} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public loggingProjectsMetricsCreate(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any) {
        return ProjectsApiFp(this.configuration).loggingProjectsMetricsCreate(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a logs-based metric.
     * @param {string} metricName The resource name of the metric to delete: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public loggingProjectsMetricsDelete(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
        return ProjectsApiFp(this.configuration).loggingProjectsMetricsDelete(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }

    /**
     * Gets a logs-based metric.
     * @param {string} metricName The resource name of the desired metric: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public loggingProjectsMetricsGet(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, options?: any) {
        return ProjectsApiFp(this.configuration).loggingProjectsMetricsGet(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, options)(this.fetch, this.basePath);
    }

    /**
     * Lists logs-based metrics.
     * @param {string} parent Required. The name of the project containing the metrics: \&quot;projects/[PROJECT_ID]\&quot; 
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.
     * @param {string} [pageToken] Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public loggingProjectsMetricsList(parent: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, pageSize?: number, pageToken?: string, options?: any) {
        return ProjectsApiFp(this.configuration).loggingProjectsMetricsList(parent, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * Creates or updates a logs-based metric.
     * @param {string} metricName The resource name of the metric to update: \&quot;projects/[PROJECT_ID]/metrics/[METRIC_ID]\&quot; The updated metric must be provided in the request and it&#39;s name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
     * @param {'1' | '2'} [_xgafv] V1 error format.
     * @param {string} [access_token] OAuth access token.
     * @param {'json' | 'media' | 'proto'} [alt] Data format for response.
     * @param {string} [callback] JSONP
     * @param {string} [fields] Selector specifying which fields to include in a partial response.
     * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {string} [oauth_token] OAuth 2.0 token for the current user.
     * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {string} [upload_protocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {LogMetric} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public loggingProjectsMetricsUpdate(metricName: string, _xgafv?: '1' | '2', access_token?: string, alt?: 'json' | 'media' | 'proto', callback?: string, fields?: string, key?: string, oauth_token?: string, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, upload_protocol?: string, body?: LogMetric, options?: any) {
        return ProjectsApiFp(this.configuration).loggingProjectsMetricsUpdate(metricName, _xgafv, access_token, alt, callback, fields, key, oauth_token, prettyPrint, quotaUser, uploadType, upload_protocol, body, options)(this.fetch, this.basePath);
    }

}

